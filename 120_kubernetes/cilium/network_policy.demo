# Cilium Network Policy

# Create two namespaces
kubectl create namespace test1
kubectl label namespace test1 app=test1
kubectl create namespace test2
kubectl label namespace test2 app=test2
kubectl get namespaces

# Create pods and services
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: web
  namespace: test1
  labels:
    app: web
spec:
  containers:
  - name: nginx
    image: nginx:stable
---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: test1
spec:
  type: ClusterIP
  selector:
    app: web
  ports:
  - name: 
    port: 80
    protocol: TCP
    targetPort: 80
---
apiVersion: v1
kind: Pod
metadata:
  name: web
  namespace: test2
  labels:
    app: web
spec:
  containers:
  - name: nginx
    image: nginx:stable
---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: test2
spec:
  type: ClusterIP
  selector:
    app: web
  ports:
  - name: 
    port: 80
    protocol: TCP
    targetPort: 80
EOF

# Check pods and services
kubectl --namespace test1 get all
kubectl --namespace test2 get all

# Test IP connectivity between test1 and test2
TEST1_IP="$(kubectl --namespace test1 get pod web -o json | jq --raw-output '.status.podIP')"
TEST2_IP="$(kubectl --namespace test2 get pod web -o json | jq --raw-output '.status.podIP')"
kubectl --namespace test1 exec -it web -- curl -s "http://${TEST2_IP}"
kubectl --namespace test2 exec -it web -- curl -s "http://${TEST1_IP}"

# Test connectivity using DNS between test1 and test2
kubectl --namespace test1 exec -it web -- curl -s http://web.test2
kubectl --namespace test2 exec -it web -- curl -s http://web.test1

# Deny all
cat <<EOF | kubectl apply -f -
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: deny-all
  namespace: test1
spec:
  endpointSelector:
    matchLabels:
      namepace: test1
      app: web
  egress:
  - {}
EOF

# Allow DNS
cat <<EOF | kubectl apply -f -
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: allow-dns
  namespace: test1
spec:
  endpointSelector:
    matchLabels:
      namepace: test1
      app: web
  egress:
  - toServices:
    - k8sService:
        serviceName: kube-dns
        namespace: kube-system
EOF

# XXX services
cat <<EOF | kubectl apply -f -
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: allow-test2
  namespace: test1
spec:
  endpointSelector:
    matchLabels:
      namepace: test1
      app: web
  egress:
  - toServices:
    - k8sService:
        serviceName: web
        namespace: test2
EOF

# XXX http
#

# XXX cluster-wide
#