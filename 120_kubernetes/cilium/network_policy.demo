# Cilium Network Policy

# Create two namespaces
kubectl create namespace test1
kubectl label namespace test1 app=test1
kubectl create namespace test2
kubectl label namespace test2 app=test2
kubectl create namespace test3
kubectl label namespace test3 app=test3
kubectl get namespaces

# Create pods and services
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: web
  namespace: test1
  labels:
    app: web
spec:
  containers:
  - name: nginx
    image: nginx:stable
---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: test1
spec:
  type: ClusterIP
  selector:
    app: web
  ports:
  - name: 
    port: 80
    protocol: TCP
    targetPort: 80
---
apiVersion: v1
kind: Pod
metadata:
  name: web
  namespace: test2
  labels:
    app: web
spec:
  containers:
  - name: nginx
    image: nginx:stable
---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: test2
spec:
  type: ClusterIP
  selector:
    app: web
  ports:
  - name: 
    port: 80
    protocol: TCP
    targetPort: 80
---
apiVersion: v1
kind: Pod
metadata:
  name: web
  namespace: test3
  labels:
    app: web
spec:
  containers:
  - name: nginx
    image: nginx:stable
---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: test3
spec:
  type: ClusterIP
  selector:
    app: web
  ports:
  - name: 
    port: 80
    protocol: TCP
    targetPort: 80
EOF

# Check pods and services
kubectl --namespace test1 get all
kubectl --namespace test2 get all

# Test IP connectivity between test1 and test2
TEST1_IP="$(kubectl --namespace test1 get pod web -o json | jq --raw-output '.status.podIP')"
TEST2_IP="$(kubectl --namespace test2 get pod web -o json | jq --raw-output '.status.podIP')"
kubectl --namespace test1 exec -it web -- curl -s "http://${TEST2_IP}"
kubectl --namespace test2 exec -it web -- curl -s "http://${TEST1_IP}"

# Test connectivity using DNS between test1 and test2
kubectl --namespace test1 exec -it web -- curl -s http://web.test2
kubectl --namespace test2 exec -it web -- curl -s http://web.test1

# Check correct cilium-agent
NODE="$(kubectl --namespace test1 get pod web --output json | jq --raw-output '.spec.nodeName')"
kubectl --namespace cilium-system get pod --selector app.kubernetes.io/name=cilium-agent --output json \
| jq --raw-output --arg node "${NODE}" '.items[] | select(.spec.nodeName == $node) | .metadata.name' \
| xargs -I{} \
    kubectl --namespace cilium-system exec {} -- \
        cilium endpoint list

# Allow DNS
cat <<EOF | kubectl apply -f -
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: allow-dns
  namespace: test1
spec:
  endpointSelector:
    matchLabels:
      app: web
      io.kubernetes.pod.namespace: test1
  egress:
  - toEndpoints:
    - matchLabels:
        k8s-app: kube-dns
        io.kubernetes.pod.namespace: kube-system
    toPorts:
    - ports:
      - port: "53"
        protocol: UDP
EOF

# Check correct cilium-agent
NODE="$(kubectl --namespace test1 get pod web --output json | jq --raw-output '.spec.nodeName')"
kubectl --namespace cilium-system get pod --selector app.kubernetes.io/name=cilium-agent --output json \
| jq --raw-output --arg node "${NODE}" '.items[] | select(.spec.nodeName == $node) | .metadata.name' \
| xargs -I{} \
    kubectl --namespace cilium-system exec {} -- \
        cilium endpoint list

# Check correct cilium-agent
NODE="$(kubectl --namespace test1 get pod web --output json | jq --raw-output '.spec.nodeName')"
kubectl --namespace cilium-system get pod --selector app.kubernetes.io/name=cilium-agent --output json \
| jq --raw-output --arg node "${NODE}" '.items[] | select(.spec.nodeName == $node) | .metadata.name' \
| xargs -I{} \
    kubectl --namespace cilium-system exec {} -- \
        cilium monitor --type drop

# Allow outgoing HTTP
cat <<EOF | kubectl apply -f -
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: allow-test2
  namespace: test1
spec:
  endpointSelector:
    matchLabels:
      app: web
      io.kubernetes.pod.namespace: test1
  egress:
  - toEndpoints:
    - matchLabels:
        app: web
        io.kubernetes.pod.namespace: test2
    toPorts:
    - ports:
      - port: "80"
        protocol: TCP
EOF

# Allow incoming HTTP
cat <<EOF | kubectl apply -f -
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: allow-test2-to-test3
  namespace: test3
spec:
  endpointSelector:
    matchLabels:
      app: web
      io.kubernetes.pod.namespace: test3
  ingress:
  - fromEndpoints:
    - matchLabels:
        app: web
        io.kubernetes.pod.namespace: test2
    toPorts:
    - ports:
      - port: "80"
        protocol: TCP
EOF

# Filter on layer7
cat <<EOF | kubectl apply -f -
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: allow-test2-to-test3
  namespace: test3
spec:
  endpointSelector:
    matchLabels:
      app: web
      io.kubernetes.pod.namespace: test3
  ingress:
  - fromEndpoints:
    - matchLabels:
        app: web
        io.kubernetes.pod.namespace: test2
    toPorts:
    - ports:
      - port: "80"
        protocol: TCP
      rules:
        http:
        - method: GET
          path: /
EOF

# Filter DNS requests
kubectl -n test1 get cnp -o name | xargs -I{} kubectl -n test1 delete {}
cat <<EOF | kubectl apply -f -
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: allow-test1-test2
  namespace: test1
spec:
  endpointSelector:
    matchLabels:
      app: web
      io.kubernetes.pod.namespace: test1
  egress:
  - toEndpoints:
    - matchLabels:
        k8s-app: kube-dns
        io.kubernetes.pod.namespace: kube-system
    toPorts:
    - ports:
      - port: "53"
        protocol: UDP
      rules:
        dns:
        - matchName: "web.test2.svc.cluster.local"
  - toEndpoints:
    - matchLabels:
        app: web
        io.kubernetes.pod.namespace: test2
    toPorts:
    - ports:
      - port: "80"
        protocol: TCP
EOF

# XXX cluster-wide
#