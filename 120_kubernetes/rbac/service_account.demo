# Service accounts

# Show kubernetes service
kubectl get service kubernetes

# Create sa
kubectl create sa foo

# Create pod with service account
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: foo-automount
spec:
  serviceAccountName: foo
  containers:
  - name: nginx
    image: nginx:stable
EOF

# Check automounted service account
kubectl exec -it foo -- mount | grep secrets
kubectl exec -it foo -- ls -l /run/secrets/kubernetes.io/serviceaccount

# Create pod without service account
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: foo-noautomount
spec:
  serviceAccountName: foo
  automountServiceAccountToken: false
  containers:
  - name: nginx
    image: nginx:stable
EOF

# Check for service account
kubectl exec -it foo -- mount | grep secrets

# Custom service account
cat <<EOF | kubectl apply -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups:
  - ""
  resources:
  - "pods"
  verbs:
  - "get"
  - "watch"
  - "list"  
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: ServiceAccount
  name: foo
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
EOF

# Check service account locally
kubectl get pods --as=system:serviceaccount:default:foo

# Deploy pod with service account
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: foo-test
spec:
  serviceAccountName: foo
  containers:
  - name: foo
    image: alpine
    command:
    - sh
    args:
    - -c
    - sleep 3600
EOF

# Check service account from pod
kubectl exec -it foo-test -- sh
apk udpate
apk add kubectl --repository=https://dl-cdn.alpinelinux.org/alpine/edge/testing
TOKEN="$(cat /run/secrets/kubernetes.io/serviceaccount/token)"
kubectl --server=https://kubernetes:443 --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt --token="${TOKEN}" version

# Create permanent token for service account
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: foo-token
  annotations:
    kubernetes.io/service-account.name: foo
type: kubernetes.io/service-account-token
EOF

# Check for permenent token
kubectl get secrets
kubectl get secrets foo-token -o json | jq --raw-output '.data.token' | base64 -d

# Test token
TOKEN="$(kubectl get secrets foo-token -o json | jq --raw-output '.data.token' | base64 -d)"
kubectl --token="${TOKEN}" auth can-i get pods